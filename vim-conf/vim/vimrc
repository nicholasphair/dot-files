" Enable syntax highlighting.
syntax on
"
" ignorecase
set ignorecase

" Indent based on the filetype. Uses scripts in <install_path>/indent directory
filetype plugin indent on

" show existing tab with 2 spaces width
set tabstop=2

" when indenting with '>', use 2 spaces width
set shiftwidth=2

" On pressing tab, insert 4 spaces
set expandtab

" Used to left align public/private keywords in C++ headers.
set cinoptions+=g0

" Setting nu and rnu turns on a hybrid line numbering system.
set number
set relativenumber

" Set nu and rnu in Explore.
let g:netrw_bufsettings = "noma nomod nu nobl nowrap ro rnu"

" Highlight what you are searching.
set hlsearch

" Incremental search. Search as you type. Not after enter.
set incsearch

" Backspace was misbehaving. This seems to fix it.
set backspace=indent,eol,start

" Choose to hide a buffer instead of closing it on :edit.
set hidden

" Autosign our `TODO's`
inoreabbrev TODO: TODO (nphair):
inoreabbrev NOTE: NOTE (nphair):

" Map escape to jk.
inoremap jk <Esc>`^

" Allow for actual tabbing with shift tab.
" inoremap <S-Tab> <C-V><Tab>
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>

" Map capital versions to eol (no \n) included.
nnoremap C c$
nnoremap D d$
nnoremap Y y$

" Autocomplete comments
set formatoptions+=r

" Change the default map leader, '\', to ' '
let mapleader = " "

" Run the selected code through the interpreter
xnoremap <leader>j :w !julia6<cr>
xnoremap <leader>p :w !python<cr>

" Split to the right and below and hop over to the newly split window.
set splitbelow
set splitright

" Convenient splitting key mappings.
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Folding stuff
" set foldmethod=indent
set nofoldenable

" Bash-like autocompletion.
set wildmode=longest,list,full

" Store .viminfo in our history directory.
set viminfo+=n~/.history/viminfo

" Shut up the vim beeping.
set visualbell

" Highlight the current line.
set cursorline

" Twiddle case
function! TwiddleCase(str)
  if a:str ==# toupper(a:str)
    let result = tolower(a:str)
  elseif a:str ==# tolower(a:str)
    let result = substitute(a:str,'\(\<\w\+\>\)', '\u\1', 'g')
  else
    let result = toupper(a:str)
  endif
  return result
endfunction
vnoremap ~ y:call setreg('', TwiddleCase(@"), getregtype(''))<CR>gv""Pgv


" The current version of my status bar starts here.
function ColumnLength()
    return col("$")
endfunction

function ColumnString()
    return "Column:" . col(".") . "/" . col("$")
endfunction

" set laststatus=2             " Always display status bar.
" set statusline=              " Clear current status bar in favor of our own.
" set statusline+=%f           " Display the file name.
" set statusline+=%=           " Set the alignment to right justified.
" set statusline+=Line:        " Line prompt
" set statusline+=%02l         " Current line number
" set statusline+=/            " \ prompt
" set statusline+=%-8L         " Total line count. Pad with 8 spaces.
" set statusline+=%#DiffDelete#                           " Red. If applicable.
" set statusline+=%{ColumnLength()>80?ColumnString():''}  " Print column string.
" set statusline+=%*                                      " Clear formatting.
" set statusline+=%{ColumnLength()>80?'':ColumnString()}  " Print column string.
"=============================================================================
"                     Using vim-plug to manage our plugins                    
"=============================================================================
" Grab vim-plug if its not already there.
" Note, check the readme if we're sitting behind a proxy for what to do.
" Note, this complains alot... just persist and everything gets set up.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'GEverding/vim-hocon'
Plug 'bling/vim-bufferline'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'danilo-augusto/vim-afterglow'
Plug 'gabrielelana/vim-markdown'
Plug 'kshenoy/vim-signature'
Plug 'mephux/bro.vim'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-scripts/headerguard'
call plug#end()
"=============================================================================
"=============================================================================
" We'll have to set out colorscheme after we load it's plugin.
colorscheme afterglow
set background=dark

" --------------------Plugin Configurations-----------------------------------
" Headerguard configurations. Add header guards to .h and .hpp files.
autocmd BufNewFile,BufRead *.h,*.hpp HeaderguardAdd


autocmd BufNewFile,BufRead */config	setfiletype sshconfig
autocmd BufNewFile,BufRead *.py set shiftwidth=4
