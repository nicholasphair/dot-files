# use C-a, since it's on the home row and easier to hit than C-b
set-option -g prefix C-a
set-option -g prefix C-a
unbind-key C-a
bind-key C-a send-prefix
set -g base-index 1

# Easy config reload
bind-key R source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."

# vi is good
setw -g mode-keys vi
set-option -s set-clipboard off
#bind-key -t vi-copy MouseDragEnd1Pane copy-pipe "xclip -se c -i"


# mouse behavior
setw -g mouse on
#set -g mouse-select-pane on
#set -g mouse-resize-pane on

set-option -g default-terminal screen-256color

bind-key : command-prompt
bind-key r refresh-client
bind-key L clear-history

bind-key space next-window
bind-key bspace previous-window
bind-key enter next-layout

# use vim-like keys for splits and windows
unbind |
unbind -
bind | split-window -h
bind - split-window -v
bind-key v split-window -h
bind-key s split-window -v
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"
bind C-l send-keys 'C-l'

bind-key C-o rotate-window

bind-key + select-layout main-horizontal
bind-key = select-layout main-vertical
set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80

bind-key a last-pane
bind-key q display-panes
bind-key c new-window
bind-key t next-window
bind-key T previous-window

bind-key [ copy-mode
bind-key ] paste-buffer

#bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'

# Setup 'v' to begin selection as in Vim
#bind-key -t vi-copy v begin-selection
#bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
#
## Update default binding of `Enter` to also use copy-pipe
#unbind -t vi-copy Enter
#bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

set-window-option -g display-panes-time 1500

# Status Bar
#set-option -g status-interval 1
#set-option -g status-left ''
#set-option -g status-right '%l:%M%p'
#set-window-option -g window-status-current-fg magenta
#set-option -g status-fg default
#
## Status Bar solarized-dark (default)
#set-option -g status-bg black
#set-option -g pane-active-border-fg yellow
#set-option -g pane-border-fg cyan
#
#set-window-option -g mode-keys vi
##set-window-option -g automatic-rename off
#setw -g window-status-current-format '#[fg=yellow][#I-#F#W]#[default]'
#setw -g window-status-format '[#I#F#W]'

set -g history-limit 5000000

set-window-option -g window-status-fg colour244
set-window-option -g window-status-bg default
set-window-option -g window-status-current-fg colour166
set-window-option -g window-status-current-bg default
# pane border
set-option -g pane-border-fg colour235 #base02
set-option -g pane-active-border-fg colour240 #base01

set -g status-bg colour235
set -g status-fg colour136
set -g status-interval 1
set -g status-right '#[fg=yellow]#(cut -d " " -f 1-3 /proc/loadavg)#[default] #[fg=cyan,bold]%Y-%m-%d %H:%M #[fd=green,bold]<#H>'

# Set window notifications
setw -g monitor-activity on
set -g visual-activity on

# Allow the arrow key to be used immediately after changing windows
# NP: ...at the cost of reajusting windows continuously. No thanks for now.
#set-option -g repeat-time 0
